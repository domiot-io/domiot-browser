/*! Repository: https://github.com/domiot-io/domiot-browser */
class BindingDriverCom{constructor(e="ws://localhost:8080"){this.wsAddress=e,this.ws=null,this.subscriptions=new Map,this.topicToBindings=new Map,this.isManualDisconnect=!1,this.reconnectTimer=null,this.reconnectDelay=1e3}connect(){this.ws&&this.ws.readyState===WebSocket.OPEN||(this.reconnectTimer&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=null),this.ws=new WebSocket(this.wsAddress),this.ws.onopen=()=>{this.resubscribeAll()},this.ws.onmessage=e=>{try{const t=JSON.parse(e.data);this.handleMessage(t)}catch(e){console.error("Error parsing message: "+e.message)}},this.ws.onclose=()=>{this.isManualDisconnect||this.scheduleReconnect()},this.ws.onerror=e=>{console.error("WebSocket error: "+e.message),this.isManualDisconnect||(this.ws&&this.ws.readyState!==WebSocket.CLOSED?this.ws.close():this.scheduleReconnect())})}disconnect(){this.isManualDisconnect=!0,this.reconnectTimer&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=null),this.ws&&this.ws.close()}scheduleReconnect(){this.isManualDisconnect||(this.reconnectTimer=setTimeout(()=>{this.isManualDisconnect||this.connect()},this.reconnectDelay))}resubscribeAll(){if(0!==this.subscriptions.size)for(const[e,t]of this.subscriptions){if(document.getElementById(e)){const s={type:"subscribe",data:{topic:t,bindingId:e}};this.ws.send(JSON.stringify(s))}else{this.subscriptions.delete(e);const s=this.topicToBindings.get(t);s&&(s.delete(e),0===s.size&&this.topicToBindings.delete(t))}}}subscribeRead(e){const t=e.getAttribute("location");if(!t)return;if(this.subscriptions.set(e.id,t),this.topicToBindings.has(t)||this.topicToBindings.set(t,new Set),this.topicToBindings.get(t).add(e.id),!this.ws||this.ws.readyState!==WebSocket.OPEN)return void console.log("Connecting to server...");const s={type:"subscribe",data:{topic:t,bindingId:e.id}};this.ws.send(JSON.stringify(s))}unsubscribeRead(e){if(!this.ws||this.ws.readyState!==WebSocket.OPEN)return void console.error("Not connected to server");const t=e.getAttribute("location");if(!t)return;const s={type:"unsubscribe",data:{topic:t,bindingId:e.id}};this.ws.send(JSON.stringify(s)),this.subscriptions.delete(e.id);const i=this.topicToBindings.get(t);i&&(i.delete(e.id),0===i.size&&this.topicToBindings.delete(t))}write(e,t){if(!t)return;if(!this.ws||this.ws.readyState!==WebSocket.OPEN)return void console.error("Not connected to server");const s=e.getAttribute("location");if(!s)return;const i={type:"write",data:{bindingLocation:s,message:t.trim(),bindingId:e.id}};this.ws.send(JSON.stringify(i))}handleMessage(e){switch(e.type){case"read":const t=this.findAllBindingsByTopic(e.data.topic);t.length>0&&t.forEach(t=>{const s=document.getElementById(t);s&&s.onData(null,e.data.value)});break;case"change":e.data.error&&console.error(`Driver error: ${e.data.error}`);break;case"error":console.error(`Error: ${e.data.error}`)}}findAllBindingsByTopic(e){const t=this.topicToBindings.get(e);return t?Array.from(t):[]}}